name: Test

on:
  workflow_dispatch:

  push:
    branches: [main, dev]

  pull_request_target:

jobs:
  count:
    runs-on: ubuntu-latest
    name: Count Code

    steps:
      - uses: actions/checkout@v2

      - name: Install CLoC
        run: |
          sudo apt-get install -y cloc

      - name: Count lines of code
        id: cloc
        run: |
          cloc --vcs=git --md . | tee report.md
          content="$(cat report.md)"
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=content::$content"

      - uses: peter-evans/commit-comment@v1
        if: "github.event_name == 'push'"
        with:
          body: ${{ steps.cloc.outputs.content }}

  docker:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: [count]

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Test Docker build
        run: |
          docker build .

  test:
    runs-on: ${{ matrix.os }}
    name: Testing
    needs: [count]

    strategy:
      matrix:
        python: ["3.8", "3.9", "3.10"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: true
      max-parallel: 3

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install poetry
        run: |
          pip install poetry

      - name: Get poetry cache directory
        id: cache-poetry
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"

      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.cache-poetry.outputs.dir }}
            ./.venv
          key: ${{ runner.os }}-poetry-py${{ matrix.python }}-${{ hashFiles('poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        timeout-minutes: 5
        run: |
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path .venv
          poetry install -vvv

      - name: Testing with pytest
        run: |
          curl -L ${{ secrets.DOTENV_LINK }} > .env
          poetry run pytest --cov ./hibiapi/ --cov-report xml --cov-report term-missing --reruns 5 --reruns-delay 7 ./test

      - uses: codecov/codecov-action@v2.1.0
        with:
          file: coverage.xml

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: logs-${{ runner.os }}-${{ matrix.python }}
          path: data/logs
